name: Deploy URL Shortener

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

concurrency:
  group: deploy-url-shortener-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  SITE_DIR: ./url-shortener
  TF_DIR: ./terraform
  LAMBDA_DIR: ./lambda

jobs:
  build:
    name: Build (Bun)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ${{ env.SITE_DIR }}/bun.lockb
            ${{ env.SITE_DIR }}/node_modules
          key: bun-${{ runner.os }}-${{ hashFiles('url-shortener/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Install deps
        working-directory: ${{ env.SITE_DIR }}
        run: bun install

      - name: Build (inject public env)
        working-directory: ${{ env.SITE_DIR }}
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
        run: bun run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-dist
          path: ${{ env.SITE_DIR }}/dist
          if-no-files-found: error
          retention-days: 7

  build-lambda:
    name: Build Lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache npm deps
        uses: actions/cache@v4
        with:
          path: ${{ env.LAMBDA_DIR }}/node_modules
          key: npm-lambda-${{ runner.os }}-${{ hashFiles('lambda/package-lock.json') }}
          restore-keys: |
            npm-lambda-${{ runner.os }}-

      - name: Install dependencies
        working-directory: ${{ env.LAMBDA_DIR }}
        run: npm ci

      - name: Compile TypeScript
        working-directory: ${{ env.LAMBDA_DIR }}
        run: npx tsc index.ts --target es2020 --module commonjs --declaration false

      - name: Create zip package
        working-directory: ${{ env.LAMBDA_DIR }}
        run: |
          rm -f lambda_function.zip
          zip -r lambda_function.zip index.js node_modules/

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zip
          path: ${{ env.LAMBDA_DIR }}/lambda_function.zip
          if-no-files-found: error
          retention-days: 7

  infra:
    name: Terraform
    runs-on: ubuntu-latest
    needs: [build, build-lambda]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip
          path: ${{ env.TF_DIR }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726032046446:role/github-actions-role
          role-session-name: emaillambdasession
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform fmt (check)
        id: fmt
        working-directory: ${{ env.TF_DIR }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init (reconfigure backend)
        id: init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false -reconfigure -backend-config=backend.hcl

      - name: Terraform Workspace
        working-directory: ${{ env.TF_DIR }}
        run: terraform workspace select default || terraform workspace new default

      - name: Terraform validate
        id: validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform apply (push to master only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        id: apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve

      - name: Export Terraform outputs
        id: tf-outputs
        working-directory: ${{ env.TF_DIR }}
        run: |
          OUT=$(terraform output -json || echo "{}")
          echo "$OUT"
          echo "bucket=$(echo "$OUT" | jq -r '.bucket_name.value // .bucket.value // empty')" >> "$GITHUB_OUTPUT"
          echo "distribution_id=$(echo "$OUT" | jq -r '.cloudfront_distribution_id.value // empty')" >> "$GITHUB_OUTPUT"
          echo "website_url=$(echo "$OUT" | jq -r '.website_url.value // empty')" >> "$GITHUB_OUTPUT"

    outputs:
      bucket: ${{ steps.tf-outputs.outputs.bucket }}
      distribution_id: ${{ steps.tf-outputs.outputs.distribution_id }}
      website_url: ${{ steps.tf-outputs.outputs.website_url }}

  deploy:
    name: Upload & Invalidate
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726032046446:role/github-actions-role
          role-session-name: emaillambdasession
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: dist

      - name: Deploy to S3
        run: |
          if [ -z "${{ needs.infra.outputs.bucket }}" ]; then
            echo "Bucket output is empty. Ensure Terraform defines output 'bucket_name' (or 'bucket')."
            exit 1
          fi
          aws s3 sync ./dist "s3://${{ needs.infra.outputs.bucket }}/" --delete

      - name: Create CloudFront invalidation
        if: ${{ needs.infra.outputs.distribution_id != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ needs.infra.outputs.distribution_id }}" \
            --paths "/*"

      - name: Summary
        run: |
          {
            echo "## Deploy Summary"
            echo ""
            echo "- **Bucket**: \`${{ needs.infra.outputs.bucket || 'n/a' }}\`"
            echo "- **Distribution ID**: \`${{ needs.infra.outputs.distribution_id || 'n/a' }}\`"
            echo "- **Website URL**: ${{ needs.infra.outputs.website_url || 'n/a' }}"
          } >> "$GITHUB_STEP_SUMMARY"